/*
EJS (Embedded JavaScript) with Express.js

EJS is a simple yet powerful templating engine that integrates seamlessly with 
Express.js to enable dynamic HTML rendering using JavaScript. It allows developers 
to embed JavaScript code directly within HTML files, facilitating the creation of 
dynamic and reusable views.

Key Concepts and Setup:

1. EJS Template Engine Setup
   - Register EJS as the view engine in your Express application using:
     app.set("view engine", "ejs");
   - This configuration enables rendering of '.ejs' files without specifying the 
     file extension explicitly.
   - EJS templates support embedding JavaScript logic, such as loops and conditionals,
     directly within HTML.

2. Views Directory Configuration
   - Define the directory where EJS templates reside using:
     app.set("views", path.join(__dirname, "/views"));
   - This ensures Express knows where to locate the template files.
   - Using path.join with __dirname guarantees cross-platform compatibility.

3. Rendering Templates and Passing Dynamic Data
   - Use res.render(templateName, dataObject) to render EJS templates.
   - The dataObject contains variables that become accessible within the EJS file.
   - Dynamic content can be generated by passing variables such as random values, 
     arrays, or objects to the template.

4. Using Route Parameters for Dynamic Routes
   - Express route parameters (e.g., /ig/:username) can capture dynamic segments in URLs.
   - Extract these parameters using req.params and use them to fetch or render 
     user-specific data.
   - This approach allows creation of personalized views based on URL input.

5. Serving Static Files
   - Static assets like CSS and JavaScript files are served using express.static middleware.
   - Register directories containing static files to make them publicly accessible.
   - This enables styling and client-side scripting to enhance the rendered pages.

6. Server Startup
   - Initialize the server with app.listen(port, callback) to begin listening for requests.
   - The callback function can be used for logging or executing startup logic.
   - Choosing ports above 1024 avoids requiring elevated privileges.

Summary:
By combining Express.js with EJS, developers can build robust web applications that 
serve dynamic content efficiently. Proper configuration of the view engine, views 
directory, routing, and static file serving forms the foundation of a maintainable 
and scalable server-side rendered application.
*/

// 1. Server and Port Setup

const express = require("express"); // Import the Express.js module to create a web server instance.
const app = express();              // Instantiate an Express application.

const port = 8080; // Define the port number for the server to listen on.

/*
  Note:
  - Use a port number above 1024 to avoid requiring root privileges.
  - Ensure the port matches what you use in your browser or API client.
 */


// 2. Views Directory Configuration
const path = require("path"); // Import Node.js path module for handling file paths.
app.set("views", path.join(__dirname, "/views")); // Set the directory for EJS templates.

/*
  Note:
  - Place all EJS template files in the 'views' folder.
  - __dirname refers to the directory of the current script, ensuring portability.
  - path.join provides cross-platform compatibility (Windows, macOS, Linux).
 */


// 3. EJS Template Engine Setup
app.set("view engine", "ejs"); // Register EJS as the template engine for rendering views.

/*
  Note:
  - Allows rendering of '.ejs' files without specifying the extension.
  - Express will search for template files within the configured 'views' directory.
  - EJS enables embedding JavaScript code within HTML for dynamic content.
 */


// 4. Route Definitions (Dynamic and Static Rendering)
// [A] Root Route - Render Static Home Page
app.get("/", (req, res) => {
    res.render("home.ejs"); // Render the 'home.ejs' template from the views folder.
});

/*
  Note:
  - res.render(template, data) renders an EJS template and sends HTML to the client.
  - If no data object is provided, the template will only render static HTML.
  - Ensure the specified template file exists to prevent runtime errors.
*/

// [B] Roll Dice Route - Render Page with Random Dice Value
app.get("/rolldice", (req, res) => {
    let diceVal = Math.floor(Math.random() * 6) + 1; // Generate a random integer between 1 and 6.
    res.render("rolldice.ejs", { diceVal });         // Pass 'diceVal' to the EJS template as a variable.
});

/*
  Note:
  - Data passed as an object to res.render() becomes accessible in the EJS template.
  - Use <%= diceVal %> in the template to display the dice value.
  - Math.random() is commonly used for demonstrations involving randomness.
*/

// [C] Fruits Route - Render Page with List of Fruits
app.get("/fruits", (req, res) => {
    const fruits = ["apple", "banana", "mango", "orange"]; // Define an array of fruit names.
    res.render("fruits.ejs", { fruits });                  // Pass the array to the template.
});

/*
  Note:
  - Pass arrays or objects to templates for dynamic list rendering.
  - Use EJS syntax: <%= variable %> for output, <% %> for logic (loops, conditionals).
  - Always pass required variables through res.render() to avoid "undefined" errors.
*/

// [D] Instagram User Route - Render User Data from JSON
app.get("/ig/:username", (req, res) => {
    let { username } = req.params; // Extract the 'username' parameter from the URL.
    const instaData = require("./data.json"); // Import user data from a JSON file.
    res.render("instagram.ejs", { data: instaData[username] }); // Pass user data to the template.
});

/*
  Note:
  - Route parameters (e.g. :username) are accessed via req.params.
  - Data can be loaded from external files (such as JSON) for dynamic rendering.
  - Always validate that the requested data exists to avoid rendering errors.
*/


// 5. Static Files Middleware
// Serve static files (e.g., CSS and JS) from the specified public directories.
app.use(express.static(path.join(__dirname, "public/css")));
app.use(express.static(path.join(__dirname, "public/js")));

/*
  Note:
  - express.static middleware serves files such as CSS stylesheets and JavaScript files.
  - Place your static assets in the specified directories for public access.
  - Multiple directories can be registered to serve different types of assets.
*/



// 6. Server Startup
app.listen(port, () => {
    console.log(`listening on port ${port}`);
});

/*
  Note:
  - app.listen() starts the Express server and keeps it running.
  - Place this at the end of the file, after all middleware and routes.
  - The callback function is optional but useful for logging or additional startup logic.
 */